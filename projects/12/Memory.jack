// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
    static Array ram;

    static int heapBase, heapSize, SIZE, NEXT;
    static Array freeList;

    /** Initializes the class. */
    function void init() {
        let ram = 0;

        let heapBase = 2048;
        let heapSize = 14335;
        let SIZE = 0;
        let NEXT = 1;
        let freeList = heapBase;
        let freeList[SIZE] = heapSize;
        let freeList[NEXT] = 0;

        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let ram[address] = value;
        return;
    }

    function Array firstFit(int size) {
        var Array currentBlock;
        var int currentSize;

        if (freeList[NEXT] = 0) {
            return freeList;
        }

        let currentBlock = freeList;
        while (~(currentBlock = 0)) {
            let currentSize = currentBlock[SIZE];
            if (~(currentSize < size + 2)) {
                return currentBlock;
            }
            let currentBlock = currentBlock[NEXT];
        }

        return 0;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var Array segment, block;

        let segment = Memory.firstFit(size);
        if (segment = 0) {
            // TODO: defragmentation
        }

        let block = segment + segment[SIZE] - size + 1;
        let segment[SIZE] = segment[SIZE] - (size + 1);

        return block;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        var Array currentBlock;

        let currentBlock = freeList;
        while (~(currentBlock = 0)) {
            if (currentBlock[NEXT] = 0) {
                let currentBlock[NEXT] = o - 1;
                return;
            }
            let currentBlock = currentBlock[NEXT];
        }

        return;
    }
}
