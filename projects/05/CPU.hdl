// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // check the type of the instruction
    Not(in=instruction[15], out=isA);
    Not(in=isA, out=isC);


    // use the ALU's output as the input?
    And(a=isC, b=instruction[5], out=useALUOut);
    // select the input for the A Register
    Mux16(a=instruction, b=ALUOut, sel=useALUOut, out=ARegIn);
    // load the input into the A register?
    Or(a=isA, b=instruction[5], out=loadA);
    // load the input into the A register if loadA
    ARegister(in=ARegIn, load=loadA, out=ARegOut, out[0..14]=addressM);


    // calculate the input to the ALU
    Mux16(a=ARegOut, b=inM, sel=instruction[12], out=ALUIn);
    // calculate the control bits to the ALU
    And(a=isC, b=instruction[6], out=no); // c6
    And(a=isC, b=instruction[7], out=f); // c5
    And(a=isC, b=instruction[8], out=ny); // c4
    And(a=isC, b=instruction[9], out=zy); // c3
    And(a=isC, b=instruction[10], out=nx); // c2
    And(a=isC, b=instruction[11], out=zx); // c1
    // calculate the outputs using the ALU
    ALU(x=DRegOut, y=ALUIn, zx=zx, nx=nx, zy=zy, ny=ny, f=f, no=no, out=ALUOut, out=outM, zr=zr, ng=ng);
    // writeM?
    And(a=isC, b=instruction[3], out=writeM);
    // load the ALU's output into the D register?
    And(a=isC, b=instruction[4], out=loadD);
    // load the output into the D register if loadD
    DRegister(in=ALUOut, load=loadD, out=DRegOut);


    // check if the ALU's output is positive
    Or(a=zr, b=ng, out=notPos);
    Not(in=notPos, out=pos);
    // calculate jump conditions
    And(a=instruction[0], b=pos, out=j3Jump);
    And(a=instruction[1], b=zr, out=j2Jump);
    And(a=instruction[2], b=ng, out=j1Jump);
    // jump?
    Or(a=j1Jump, b=j2Jump, out=j12Jump);
    Or(a=j12Jump, b=j3Jump, out=j123Jump);
    And(a=isC, b=j123Jump, out=jump);
    // fetch the next instruction
    PC(in=ARegOut, load=jump, inc=true, reset=reset, out[0..14]=pc);
}